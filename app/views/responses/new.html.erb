<!--MODAL STARTS HERE-->
<div class="modal fade" id="recordingModal" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true" data-keyboard="false" data-backdrop="static" >
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header"><!--Header-->
        <button type="button" class="close endRecording" data-dismiss="modal" aria-hidden="true"><i class="fa fa-times"></i></button>
        <p><%= @question.content %></p>
      </div>

      <!-- This is the canvas which response to sound -->
      <!-- <div class="canvasContainer">
        <canvas id="canvas" width="300" height="300"></canvas>
      </div> -->

      <div class="timer-holder">
        <div class="pie degree">
          <span class="block"></span>
          <span id="time">0</span>
        </div>
      </div>

      <!-- This contains the abstracted version of user's words-->
      <div id="on-recording"></div>

      <div class="modal-footer"><!--Footer-->
        <button name="end-recording" class="btn btn-default endRecording" data-dismiss="modal">Close and end recording</button>
      </div>
    </div>
  </div>
</div><!--END MODAL-->

<!--NO MODAL-->
<div class="pageContainer">
  <h1>Your question: <%= @question.content %></h1>
  <!-- <h2>Record</h2> -->

  <!-- Mic button which starts recording session -->
  <i id="startRecording" class="big-mic fa fa-microphone fa-4x" data-toggle="modal" data-target="#recordingModal"></i>

  <!-- This is the actual transcript -->
  <div id="recording">
    <%= form_for @response do |f| %>
      <%= f.text_area :transcript, id: "results", value: "Your transcript will go here" %>
      <%= render "shared/error_messages", obj: @response, col: :transcript %>
      <%= f.submit "Submit", id: "submit", class: "btn btn-default" %>
    <% end %>
  </div>
</div>





<script charset="utf-8">
//
// // REBECCA DON'T FORGET TO MOVE THIS TO A BETTER PLACE SOON
// // AND/OR INTEGRATE WITH TRANSCRIPTION CLICK FUNCITONS
//
// $(document).ready(function() {
//
//   var contextClass = (window.AudioContext ||
//     window.webkitAudioContext ||
//     window.mozAudioContext ||
//     window.oAudioContext ||
//     window.msAudioContext);
//     if (contextClass) {
//       // Web Audio API is available.
//       var context = new contextClass();
//     } else {
//       // Web Audio API is not available. Ask the user to use a supported browser.
//       alert("Please switch to Google Chrome v. 25 and up or Safari v. 7.1 and up.")
//     }
//
//     function getAverageVolume(array) {
//       var values = 0;
//       // get all the frequency??? amplitudes
//       for (var i = 0; i < array.length; i++) {
//         values += array[i];
//       }
//       return values / (array.length);
//     }
//
//     // Get canvas
//     function getCanvas() {
//       return document.getElementById('canvas');
//     }
//
//     // Drawing a circle
//     function canvasDrawCircle(average) {
//       var ctx = canvas.getContext('2d');
//       ctx.beginPath();
//       // x position, y position, radius, unknown, arc in radians.
//       ctx.arc(150, 150, average, 0, 2 * Math.PI, false);
//       ctx.lineWidth = 1; // border for circle
//       ctx.strokeStyle = '#FF4C4C'; // beautiful coral
//       ctx.stroke();
//     }
//
//     // Drawing the mic to the canvas
//     function canvasDrawMic() {
//       var ctx = canvas.getContext('2d');
//       mic = new Image();
//       mic.src = "<%= asset_path('mic_icon_sml.png') %>";
//       mic.onload = function() {
//         ctx.drawImage(mic,130,120);
//       };
//     }
//
//     function canvasInitialize(width, height) {
//       // Sets canvas parameters
//       getCanvas().width = width;
//       getCanvas().height = height;
//     }
//
//     function onSuccess(stream) {
//       var context = new webkitAudioContext();
//       var mediaStreamSource = context.createMediaStreamSource(stream);
//
//       var analyser = context.createAnalyser();
//       analyser.smoothingTimeConstant = 0.7;
//       analyser.fftSize = 1024;
//
//       // creates ScriptProcessorNode w allows generation, processing, or analyzing of audio
//       var javascriptNode = context.createScriptProcessor(2048, 1, 1);
//
//       javascriptNode.onaudioprocess = function(e) {
//
//         // could this eventually be used to collect a recording???
//         //var sample = e.inputBuffer.getChannelData(0);
//
//         // get the average, bincount is fftsize / 2
//         var array =  new Uint8Array(analyser.frequencyBinCount);
//         analyser.getByteFrequencyData(array);
//
//         // calculate average volume
//         var average = getAverageVolume(array)
//
//         // print value out (Not including this for now)
//         // log(average);
//
//         // create canvas
//         canvasInitialize(300,300);
//
//         //Draw circle (the integer is the base radius)
//         canvasDrawCircle(average/1.5 + 50);
//
//         canvasDrawMic();
//
//       };
//
//       // stream -> mediaSource -> analyser -> javascriptNode -> destination
//       mediaStreamSource.connect(analyser);
//       analyser.connect(javascriptNode);
//       javascriptNode.connect(context.destination);
//     }
//
//     function onError() {
//       alert('Error');
//     }
//
//     //var initializedContext = false;
//     //$("#startRecording").click(
//       //function() {
//         //if (!initializedContext) {
//           if(navigator.getUserMedia) {
//             navigator.getUserMedia({video: false, audio: true}, onSuccess, onError);
//           } else if(navigator.webkitGetUserMedia) {
//             navigator.webkitGetUserMedia({video: false, audio: true}, onSuccess, onError);
//           }
//           //initializedContext = true
//         //}
//       //}
//     )
//
//

  // THIS IS FOR RECORDING, MAYBE EVENTUALLY
  // function record() {
  //   navigator.getUserMedia({audio: true}, function(localMediaStream){
  //     mediaStream = localMediaStream;
  //     var mediaStreamSource = context.createMediaStreamSource(localMediaStream);
  //     rec = new Recorder(mediaStreamSource, {
  //       workerPath: '/app/assetes/javascripts/recorderWorker.js'
  //     });
  //
  //     rec.record();
  //   }, function(err){
  //     console.log('Not supported');
  //   });
  // }
  //
  // function stop() {
  //   mediaStream.stop();
  //   rec.stop();
  //
  //   rec.exportWAV(function(e){
  //     rec.clear();
  //     Recorder.forceDownload(e, "test.wav");
  //   });
  // }

});


</script>
